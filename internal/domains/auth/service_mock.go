// Code generated by mockery v2.43.1. DO NOT EDIT.

package auth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, subdomain, email, password
func (_m *MockService) Login(ctx context.Context, subdomain string, email string, password string) (string, error) {
	ret := _m.Called(ctx, subdomain, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, subdomain, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, subdomain, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, subdomain, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - subdomain string
//   - email string
//   - password string
func (_e *MockService_Expecter) Login(ctx interface{}, subdomain interface{}, email interface{}, password interface{}) *MockService_Login_Call {
	return &MockService_Login_Call{Call: _e.mock.On("Login", ctx, subdomain, email, password)}
}

func (_c *MockService_Login_Call) Run(run func(ctx context.Context, subdomain string, email string, password string)) *MockService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_Login_Call) Return(_a0 string, _a1 error) *MockService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Login_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *MockService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, userID, orgID
func (_m *MockService) Logout(ctx context.Context, userID int64, orgID int64) error {
	ret := _m.Called(ctx, userID, orgID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, orgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - orgID int64
func (_e *MockService_Expecter) Logout(ctx interface{}, userID interface{}, orgID interface{}) *MockService_Logout_Call {
	return &MockService_Logout_Call{Call: _e.mock.On("Logout", ctx, userID, orgID)}
}

func (_c *MockService_Logout_Call) Run(run func(ctx context.Context, userID int64, orgID int64)) *MockService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockService_Logout_Call) Return(_a0 error) *MockService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Logout_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, email, password, subdomain, orgName
func (_m *MockService) Register(ctx context.Context, email string, password string, subdomain string, orgName string) error {
	ret := _m.Called(ctx, email, password, subdomain, orgName)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, email, password, subdomain, orgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
//   - subdomain string
//   - orgName string
func (_e *MockService_Expecter) Register(ctx interface{}, email interface{}, password interface{}, subdomain interface{}, orgName interface{}) *MockService_Register_Call {
	return &MockService_Register_Call{Call: _e.mock.On("Register", ctx, email, password, subdomain, orgName)}
}

func (_c *MockService_Register_Call) Run(run func(ctx context.Context, email string, password string, subdomain string, orgName string)) *MockService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockService_Register_Call) Return(_a0 error) *MockService_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Register_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
