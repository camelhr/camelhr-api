// Code generated by mockery v2.42.2. DO NOT EDIT.

package user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ServiceMock is an autogenerated mock type for the Service type
type ServiceMock struct {
	mock.Mock
}

// CreateOwner provides a mock function with given fields: ctx, orgID, email, password
func (_m *ServiceMock) CreateOwner(ctx context.Context, orgID int64, email string, password string) (User, error) {
	ret := _m.Called(ctx, orgID, email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateOwner")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) (User, error)); ok {
		return rf(ctx, orgID, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) User); ok {
		r0 = rf(ctx, orgID, email, password)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = rf(ctx, orgID, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, orgID, email, password
func (_m *ServiceMock) CreateUser(ctx context.Context, orgID int64, email string, password string) (User, error) {
	ret := _m.Called(ctx, orgID, email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) (User, error)); ok {
		return rf(ctx, orgID, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) User); ok {
		r0 = rf(ctx, orgID, email, password)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = rf(ctx, orgID, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *ServiceMock) DeleteUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableUser provides a mock function with given fields: ctx, id, comment
func (_m *ServiceMock) DisableUser(ctx context.Context, id int64, comment string) error {
	ret := _m.Called(ctx, id, comment)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableUser provides a mock function with given fields: ctx, id, comment
func (_m *ServiceMock) EnableUser(ctx context.Context, id int64, comment string) error {
	ret := _m.Called(ctx, id, comment)

	if len(ret) == 0 {
		panic("no return value specified for EnableUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateAPIToken provides a mock function with given fields: ctx, id
func (_m *ServiceMock) GenerateAPIToken(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAPIToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByAPIToken provides a mock function with given fields: ctx, token
func (_m *ServiceMock) GetUserByAPIToken(ctx context.Context, token string) (User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByAPIToken")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) User); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *ServiceMock) GetUserByID(ctx context.Context, id int64) (User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByOrgIDEmail provides a mock function with given fields: ctx, orgID, email
func (_m *ServiceMock) GetUserByOrgIDEmail(ctx context.Context, orgID int64, email string) (User, error) {
	ret := _m.Called(ctx, orgID, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByOrgIDEmail")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (User, error)); ok {
		return rf(ctx, orgID, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) User); ok {
		r0 = rf(ctx, orgID, email)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, orgID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByOrgSubdomainEmail provides a mock function with given fields: ctx, orgSubdomain, email
func (_m *ServiceMock) GetUserByOrgSubdomainEmail(ctx context.Context, orgSubdomain string, email string) (User, error) {
	ret := _m.Called(ctx, orgSubdomain, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByOrgSubdomainEmail")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (User, error)); ok {
		return rf(ctx, orgSubdomain, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) User); ok {
		r0 = rf(ctx, orgSubdomain, email)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orgSubdomain, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetAPIToken provides a mock function with given fields: ctx, id
func (_m *ServiceMock) ResetAPIToken(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ResetAPIToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetPassword provides a mock function with given fields: ctx, id, newPassword
func (_m *ServiceMock) ResetPassword(ctx context.Context, id int64, newPassword string) error {
	ret := _m.Called(ctx, id, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetEmailVerified provides a mock function with given fields: ctx, id
func (_m *ServiceMock) SetEmailVerified(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SetEmailVerified")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceMock creates a new instance of ServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
