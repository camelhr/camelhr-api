// Code generated by mockery v2.43.1. DO NOT EDIT.

package organization

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateOrganization provides a mock function with given fields: ctx, subdomain, name
func (_m *MockRepository) CreateOrganization(ctx context.Context, subdomain string, name string) (Organization, error) {
	ret := _m.Called(ctx, subdomain, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (Organization, error)); ok {
		return rf(ctx, subdomain, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) Organization); ok {
		r0 = rf(ctx, subdomain, name)
	} else {
		r0 = ret.Get(0).(Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, subdomain, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type MockRepository_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - subdomain string
//   - name string
func (_e *MockRepository_Expecter) CreateOrganization(ctx interface{}, subdomain interface{}, name interface{}) *MockRepository_CreateOrganization_Call {
	return &MockRepository_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization", ctx, subdomain, name)}
}

func (_c *MockRepository_CreateOrganization_Call) Run(run func(ctx context.Context, subdomain string, name string)) *MockRepository_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_CreateOrganization_Call) Return(_a0 Organization, _a1 error) *MockRepository_CreateOrganization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateOrganization_Call) RunAndReturn(run func(context.Context, string, string) (Organization, error)) *MockRepository_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganization provides a mock function with given fields: ctx, id, comment
func (_m *MockRepository) DeleteOrganization(ctx context.Context, id int64, comment string) error {
	ret := _m.Called(ctx, id, comment)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganization'
type MockRepository_DeleteOrganization_Call struct {
	*mock.Call
}

// DeleteOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - comment string
func (_e *MockRepository_Expecter) DeleteOrganization(ctx interface{}, id interface{}, comment interface{}) *MockRepository_DeleteOrganization_Call {
	return &MockRepository_DeleteOrganization_Call{Call: _e.mock.On("DeleteOrganization", ctx, id, comment)}
}

func (_c *MockRepository_DeleteOrganization_Call) Run(run func(ctx context.Context, id int64, comment string)) *MockRepository_DeleteOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_DeleteOrganization_Call) Return(_a0 error) *MockRepository_DeleteOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteOrganization_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockRepository_DeleteOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetOrganizationByID(ctx context.Context, id int64) (Organization, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationByID")
	}

	var r0 Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (Organization, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) Organization); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetOrganizationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationByID'
type MockRepository_GetOrganizationByID_Call struct {
	*mock.Call
}

// GetOrganizationByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRepository_Expecter) GetOrganizationByID(ctx interface{}, id interface{}) *MockRepository_GetOrganizationByID_Call {
	return &MockRepository_GetOrganizationByID_Call{Call: _e.mock.On("GetOrganizationByID", ctx, id)}
}

func (_c *MockRepository_GetOrganizationByID_Call) Run(run func(ctx context.Context, id int64)) *MockRepository_GetOrganizationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepository_GetOrganizationByID_Call) Return(_a0 Organization, _a1 error) *MockRepository_GetOrganizationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetOrganizationByID_Call) RunAndReturn(run func(context.Context, int64) (Organization, error)) *MockRepository_GetOrganizationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationByName provides a mock function with given fields: ctx, name
func (_m *MockRepository) GetOrganizationByName(ctx context.Context, name string) (Organization, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationByName")
	}

	var r0 Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Organization, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Organization); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetOrganizationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationByName'
type MockRepository_GetOrganizationByName_Call struct {
	*mock.Call
}

// GetOrganizationByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRepository_Expecter) GetOrganizationByName(ctx interface{}, name interface{}) *MockRepository_GetOrganizationByName_Call {
	return &MockRepository_GetOrganizationByName_Call{Call: _e.mock.On("GetOrganizationByName", ctx, name)}
}

func (_c *MockRepository_GetOrganizationByName_Call) Run(run func(ctx context.Context, name string)) *MockRepository_GetOrganizationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetOrganizationByName_Call) Return(_a0 Organization, _a1 error) *MockRepository_GetOrganizationByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetOrganizationByName_Call) RunAndReturn(run func(context.Context, string) (Organization, error)) *MockRepository_GetOrganizationByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationBySubdomain provides a mock function with given fields: ctx, subdomain
func (_m *MockRepository) GetOrganizationBySubdomain(ctx context.Context, subdomain string) (Organization, error) {
	ret := _m.Called(ctx, subdomain)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationBySubdomain")
	}

	var r0 Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Organization, error)); ok {
		return rf(ctx, subdomain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Organization); ok {
		r0 = rf(ctx, subdomain)
	} else {
		r0 = ret.Get(0).(Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subdomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetOrganizationBySubdomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationBySubdomain'
type MockRepository_GetOrganizationBySubdomain_Call struct {
	*mock.Call
}

// GetOrganizationBySubdomain is a helper method to define mock.On call
//   - ctx context.Context
//   - subdomain string
func (_e *MockRepository_Expecter) GetOrganizationBySubdomain(ctx interface{}, subdomain interface{}) *MockRepository_GetOrganizationBySubdomain_Call {
	return &MockRepository_GetOrganizationBySubdomain_Call{Call: _e.mock.On("GetOrganizationBySubdomain", ctx, subdomain)}
}

func (_c *MockRepository_GetOrganizationBySubdomain_Call) Run(run func(ctx context.Context, subdomain string)) *MockRepository_GetOrganizationBySubdomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetOrganizationBySubdomain_Call) Return(_a0 Organization, _a1 error) *MockRepository_GetOrganizationBySubdomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetOrganizationBySubdomain_Call) RunAndReturn(run func(context.Context, string) (Organization, error)) *MockRepository_GetOrganizationBySubdomain_Call {
	_c.Call.Return(run)
	return _c
}

// SuspendOrganization provides a mock function with given fields: ctx, id, comment
func (_m *MockRepository) SuspendOrganization(ctx context.Context, id int64, comment string) error {
	ret := _m.Called(ctx, id, comment)

	if len(ret) == 0 {
		panic("no return value specified for SuspendOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_SuspendOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuspendOrganization'
type MockRepository_SuspendOrganization_Call struct {
	*mock.Call
}

// SuspendOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - comment string
func (_e *MockRepository_Expecter) SuspendOrganization(ctx interface{}, id interface{}, comment interface{}) *MockRepository_SuspendOrganization_Call {
	return &MockRepository_SuspendOrganization_Call{Call: _e.mock.On("SuspendOrganization", ctx, id, comment)}
}

func (_c *MockRepository_SuspendOrganization_Call) Run(run func(ctx context.Context, id int64, comment string)) *MockRepository_SuspendOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_SuspendOrganization_Call) Return(_a0 error) *MockRepository_SuspendOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_SuspendOrganization_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockRepository_SuspendOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// UnsuspendOrganization provides a mock function with given fields: ctx, id, comment
func (_m *MockRepository) UnsuspendOrganization(ctx context.Context, id int64, comment string) error {
	ret := _m.Called(ctx, id, comment)

	if len(ret) == 0 {
		panic("no return value specified for UnsuspendOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UnsuspendOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsuspendOrganization'
type MockRepository_UnsuspendOrganization_Call struct {
	*mock.Call
}

// UnsuspendOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - comment string
func (_e *MockRepository_Expecter) UnsuspendOrganization(ctx interface{}, id interface{}, comment interface{}) *MockRepository_UnsuspendOrganization_Call {
	return &MockRepository_UnsuspendOrganization_Call{Call: _e.mock.On("UnsuspendOrganization", ctx, id, comment)}
}

func (_c *MockRepository_UnsuspendOrganization_Call) Run(run func(ctx context.Context, id int64, comment string)) *MockRepository_UnsuspendOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_UnsuspendOrganization_Call) Return(_a0 error) *MockRepository_UnsuspendOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UnsuspendOrganization_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockRepository_UnsuspendOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganization provides a mock function with given fields: ctx, id, name
func (_m *MockRepository) UpdateOrganization(ctx context.Context, id int64, name string) error {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UpdateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganization'
type MockRepository_UpdateOrganization_Call struct {
	*mock.Call
}

// UpdateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - name string
func (_e *MockRepository_Expecter) UpdateOrganization(ctx interface{}, id interface{}, name interface{}) *MockRepository_UpdateOrganization_Call {
	return &MockRepository_UpdateOrganization_Call{Call: _e.mock.On("UpdateOrganization", ctx, id, name)}
}

func (_c *MockRepository_UpdateOrganization_Call) Run(run func(ctx context.Context, id int64, name string)) *MockRepository_UpdateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_UpdateOrganization_Call) Return(_a0 error) *MockRepository_UpdateOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UpdateOrganization_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockRepository_UpdateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
