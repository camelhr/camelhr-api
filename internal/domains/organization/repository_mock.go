// Code generated by mockery v2.42.2. DO NOT EDIT.

package organization

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryMock is an autogenerated mock type for the Repository type
type RepositoryMock struct {
	mock.Mock
}

// CreateOrganization provides a mock function with given fields: ctx, org
func (_m *RepositoryMock) CreateOrganization(ctx context.Context, org Organization) (int64, error) {
	ret := _m.Called(ctx, org)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Organization) (int64, error)); ok {
		return rf(ctx, org)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Organization) int64); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Organization) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: ctx, id
func (_m *RepositoryMock) DeleteOrganization(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrganizationByID provides a mock function with given fields: ctx, id
func (_m *RepositoryMock) GetOrganizationByID(ctx context.Context, id int64) (Organization, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationByID")
	}

	var r0 Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (Organization, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) Organization); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationByName provides a mock function with given fields: ctx, name
func (_m *RepositoryMock) GetOrganizationByName(ctx context.Context, name string) (Organization, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationByName")
	}

	var r0 Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Organization, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Organization); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuspendOrganization provides a mock function with given fields: ctx, id
func (_m *RepositoryMock) SuspendOrganization(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SuspendOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnsuspendOrganization provides a mock function with given fields: ctx, id
func (_m *RepositoryMock) UnsuspendOrganization(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UnsuspendOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrganization provides a mock function with given fields: ctx, org
func (_m *RepositoryMock) UpdateOrganization(ctx context.Context, org Organization) error {
	ret := _m.Called(ctx, org)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Organization) error); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryMock creates a new instance of RepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
