// Code generated by mockery v2.43.1. DO NOT EDIT.

package session

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockSessionManager is an autogenerated mock type for the SessionManager type
type MockSessionManager struct {
	mock.Mock
}

type MockSessionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionManager) EXPECT() *MockSessionManager_Expecter {
	return &MockSessionManager_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, userID, orgID, jwt, apiToken, ttl
func (_m *MockSessionManager) CreateSession(ctx context.Context, userID int64, orgID int64, jwt string, apiToken string, ttl time.Duration) error {
	ret := _m.Called(ctx, userID, orgID, jwt, apiToken, ttl)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string, time.Duration) error); ok {
		r0 = rf(ctx, userID, orgID, jwt, apiToken, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionManager_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockSessionManager_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - orgID int64
//   - jwt string
//   - apiToken string
//   - ttl time.Duration
func (_e *MockSessionManager_Expecter) CreateSession(ctx interface{}, userID interface{}, orgID interface{}, jwt interface{}, apiToken interface{}, ttl interface{}) *MockSessionManager_CreateSession_Call {
	return &MockSessionManager_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userID, orgID, jwt, apiToken, ttl)}
}

func (_c *MockSessionManager_CreateSession_Call) Run(run func(ctx context.Context, userID int64, orgID int64, jwt string, apiToken string, ttl time.Duration)) *MockSessionManager_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(string), args[4].(string), args[5].(time.Duration))
	})
	return _c
}

func (_c *MockSessionManager_CreateSession_Call) Return(_a0 error) *MockSessionManager_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionManager_CreateSession_Call) RunAndReturn(run func(context.Context, int64, int64, string, string, time.Duration) error) *MockSessionManager_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllOrgSessions provides a mock function with given fields: ctx, orgID
func (_m *MockSessionManager) DeleteAllOrgSessions(ctx context.Context, orgID int64) error {
	ret := _m.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllOrgSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, orgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionManager_DeleteAllOrgSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllOrgSessions'
type MockSessionManager_DeleteAllOrgSessions_Call struct {
	*mock.Call
}

// DeleteAllOrgSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID int64
func (_e *MockSessionManager_Expecter) DeleteAllOrgSessions(ctx interface{}, orgID interface{}) *MockSessionManager_DeleteAllOrgSessions_Call {
	return &MockSessionManager_DeleteAllOrgSessions_Call{Call: _e.mock.On("DeleteAllOrgSessions", ctx, orgID)}
}

func (_c *MockSessionManager_DeleteAllOrgSessions_Call) Run(run func(ctx context.Context, orgID int64)) *MockSessionManager_DeleteAllOrgSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSessionManager_DeleteAllOrgSessions_Call) Return(_a0 error) *MockSessionManager_DeleteAllOrgSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionManager_DeleteAllOrgSessions_Call) RunAndReturn(run func(context.Context, int64) error) *MockSessionManager_DeleteAllOrgSessions_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, userID, orgID
func (_m *MockSessionManager) DeleteSession(ctx context.Context, userID int64, orgID int64) error {
	ret := _m.Called(ctx, userID, orgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, orgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionManager_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockSessionManager_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - orgID int64
func (_e *MockSessionManager_Expecter) DeleteSession(ctx interface{}, userID interface{}, orgID interface{}) *MockSessionManager_DeleteSession_Call {
	return &MockSessionManager_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, userID, orgID)}
}

func (_c *MockSessionManager_DeleteSession_Call) Run(run func(ctx context.Context, userID int64, orgID int64)) *MockSessionManager_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockSessionManager_DeleteSession_Call) Return(_a0 error) *MockSessionManager_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionManager_DeleteSession_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockSessionManager_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAPITokenSession provides a mock function with given fields: ctx, apiToken
func (_m *MockSessionManager) ValidateAPITokenSession(ctx context.Context, apiToken string) (int64, int64, error) {
	ret := _m.Called(ctx, apiToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAPITokenSession")
	}

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, int64, error)); ok {
		return rf(ctx, apiToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, apiToken)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int64); ok {
		r1 = rf(ctx, apiToken)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, apiToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSessionManager_ValidateAPITokenSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAPITokenSession'
type MockSessionManager_ValidateAPITokenSession_Call struct {
	*mock.Call
}

// ValidateAPITokenSession is a helper method to define mock.On call
//   - ctx context.Context
//   - apiToken string
func (_e *MockSessionManager_Expecter) ValidateAPITokenSession(ctx interface{}, apiToken interface{}) *MockSessionManager_ValidateAPITokenSession_Call {
	return &MockSessionManager_ValidateAPITokenSession_Call{Call: _e.mock.On("ValidateAPITokenSession", ctx, apiToken)}
}

func (_c *MockSessionManager_ValidateAPITokenSession_Call) Run(run func(ctx context.Context, apiToken string)) *MockSessionManager_ValidateAPITokenSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionManager_ValidateAPITokenSession_Call) Return(_a0 int64, _a1 int64, _a2 error) *MockSessionManager_ValidateAPITokenSession_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSessionManager_ValidateAPITokenSession_Call) RunAndReturn(run func(context.Context, string) (int64, int64, error)) *MockSessionManager_ValidateAPITokenSession_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateJWTSession provides a mock function with given fields: ctx, userID, orgID, jwt
func (_m *MockSessionManager) ValidateJWTSession(ctx context.Context, userID int64, orgID int64, jwt string) error {
	ret := _m.Called(ctx, userID, orgID, jwt)

	if len(ret) == 0 {
		panic("no return value specified for ValidateJWTSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) error); ok {
		r0 = rf(ctx, userID, orgID, jwt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionManager_ValidateJWTSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateJWTSession'
type MockSessionManager_ValidateJWTSession_Call struct {
	*mock.Call
}

// ValidateJWTSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - orgID int64
//   - jwt string
func (_e *MockSessionManager_Expecter) ValidateJWTSession(ctx interface{}, userID interface{}, orgID interface{}, jwt interface{}) *MockSessionManager_ValidateJWTSession_Call {
	return &MockSessionManager_ValidateJWTSession_Call{Call: _e.mock.On("ValidateJWTSession", ctx, userID, orgID, jwt)}
}

func (_c *MockSessionManager_ValidateJWTSession_Call) Run(run func(ctx context.Context, userID int64, orgID int64, jwt string)) *MockSessionManager_ValidateJWTSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockSessionManager_ValidateJWTSession_Call) Return(_a0 error) *MockSessionManager_ValidateJWTSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionManager_ValidateJWTSession_Call) RunAndReturn(run func(context.Context, int64, int64, string) error) *MockSessionManager_ValidateJWTSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionManager creates a new instance of MockSessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionManager {
	mock := &MockSessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
